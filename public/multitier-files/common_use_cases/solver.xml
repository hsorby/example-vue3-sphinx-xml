<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.18.1 -->
<document source="/Users/hsor001/Projects/cellml/website/example-vue3-sphinx-xml/docs/multitier/source/common_use_cases/solver.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cite="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:footcite="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="users-solver"></target>
    <section ids="simulation-tool-developer-solver users-solver" names="simulation\ tool\ developer:\ solver users_solver">
        <title>Simulation tool developer: Solver</title>
        <paragraph>The code generation functionality in libCellML can be used to transform CellML models into procedural code for simulation.
            This example works through that process.</paragraph>
        <container classes="directorylist">
            <paragraph><strong>C++ resources</strong>:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>pretend download</paragraph>
                </list_item>
                <list_item>
                    <paragraph>another pretend download</paragraph>
                </list_item>
                <list_item>
                    <paragraph>resources</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>Python resources</strong>:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>fake download</paragraph>
                </list_item>
                <list_item>
                    <paragraph>resources</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>another download</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
        </container>
        <section ids="create-a-placeholder-for-the-solver" names="create\ a\ placeholder\ for\ the\ solver">
            <title>Create a placeholder for the solver</title>
            <paragraph>Interacting with procedural code means that we need a program, so the first step is to create what will soon become our solver.
                To start with, the program only reads and interprets command line arguments; the size and number of timesteps to simulate.
                This is done using a simple function, as below.</paragraph>
            <paragraph>We should probably check out <reference internal="True" refuri="index#common-users"><inline classes="std std-ref">common use cases</inline></reference></paragraph>
        </section>
    </section>
    <section ids="merging-a-pull-request" names="merging\ a\ pull\ request">
        <title>Merging a pull request</title>
        <note>
            <paragraph>Caution: before merging a pull request make sure that a release is not currently in progress.
                If a release is in progress, the prime repository will have a branch called <emphasis>release_staging_&lt;version number&gt;</emphasis> (where &lt;version number&gt; is a semantic version number).</paragraph>
        </note>
        <paragraph>When merging a pull request, the reviewer should add a comment so that the corresponding issue is closed.
            This can be done by adding a directive to the merge commit, like so:</paragraph>
        <literal_block force="False" language="default" linenos="False" xml:space="preserve">closes #123</literal_block>
    </section>
</document>
